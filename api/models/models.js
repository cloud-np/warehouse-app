const { withTransaction } = require('../db/transactions');
const { getPool } = require('../db/dbConn');
const pool = getPool();
const { findMissingKeys } = require('../utils/differentObjKeys');

/*
    Even though an ORM provides a lot of convienience, maintainability and readability,
    I was hesitant to add another dependency to the project so I decided to implement one
    myself. Plus I also wanted to showcase the ability to write queries and work with a 
    higher level of abstraction. So I tried to write a simple ORM that looks/acts kinda
    similar to mongoose library.

    One of the downsides of my 'abstraction' here is that my tables have to name the
    PRIMARY KEYs of the tables as 'id'. Also, I don't have the option here to specify 
    which columns, I want to return from the query. These can be fixed by dynamically
    specifying which columns to return in the query and having a way to specify which 
    column is the primary key, but I believe it's getting out of the scope of this project. 
*/
class BaseModel {
    constructor(tableName, objColumns, objValues) {
        tableName = tableName;

        const missingKeys = findMissingKeys(objColumns, objValues);
        if (missingKeys.length > 0){
            if (missingKeys.includes('id') && missingKeys.length === 1) {
                // Do nothing because it means the obj was created by the user.
                // The id will be auto-generated by the database.
            }else{
                throw new Error(`Your model for the table "${tableName}" is missing columns: ${missingKeys}`);
            }
        }
        // Dynamically add the properties to the class
        const tableKeys = Object.keys(objColumns);
        tableKeys.forEach(key => {
            // Skip the id column if it was not provided by the user
            if (key === 'id' && !objValues.hasOwnProperty(key))
                return
            this[key] = objValues[key];
        });
    }
}

const createModel = (tableName, tableColumns) => {
    if (!tableColumns.hasOwnProperty('id')){
        throw new Error(`Your model for the table "${tableName}" is missing the "id" column.`);
    }

    return class Model extends BaseModel {
        constructor(objValues) {
            super(tableName, tableColumns, objValues);
        }

        static async findAll() {
            const res = await withTransaction(async () =>
                await pool.query(`SELECT * FROM ${tableName}`)
            );
            return res.rows;
        }

        static async findByColumn(column, val) {
            const res = await withTransaction(async () =>
                await pool.query(`SELECT * FROM ${this.tableName} WHERE ${column} = ${val}`)
            );
            return res.rows;
        }

        static async findById(id) {
            const res = await withTransaction(async () =>
                await pool.query(`SELECT * FROM ${this.tableName} WHERE id = ${id}`)
            );
            return res.rows;
        }
    }
}

module.exports = {
    createModel: createModel,
}